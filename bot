#!/usr/bin/env python

import os
import sys
import logging
from logging import StreamHandler
from logging.handlers import RotatingFileHandler
from threading import Thread
from code import interact

log = logging.getLogger('bot')

def load_flexo():
    names = [ n for n in sys.modules
                if n == 'flexo' or n.startswith('flexo.') ]
    for name in names:
        log.info('Reloading %s', name)
        sys.modules[name] = reload(sys.modules[name])
    return __import__('flexo.irc').irc

def run_bot(context, bot_factory):
    bot = context['bot'] = bot_factory()
    bot.initialize()

    while not bot.reason:
        bot.run()

        if bot.reason == 'graceful':
            log.info('Gracefully reloading code')

            old_bot = bot

            try:
                bot = context['bot'] = bot_factory()
            except:
                log.exception('Graceful reload of code failed')
                bot.reinitialize(None)
                continue

            bot.reinitialize(old_bot)
            old_bot = None

def run_console(context):
    while True:
        try:
            source = open('state/repl.py').read()
            code = compile(source, 'repl.py', 'exec')
            eval(code, context)
        except:
            log.exception('Executing reply.py')
        interact(local=context)

def main(opts):
    def bot_factory():
        irc = load_flexo()
        bot = irc.Bot((opts.hostname, opts.port))
        bot.nick = opts.nick
        bot.name = opts.name
        return bot

    context = {}

    bot_thread = Thread(target=run_bot, name='Bot', args=(context, bot_factory))
    bot_thread.start()

    console_thread = Thread(target=run_console, name='Console', args=(context,))
    console_thread.start()

    bot_thread.join()
    sys.exit()

log_format = '[%(asctime)s] %(name)s %(levelname)s %(message)s'
def configure_logging(opts):
    root = logging.getLogger('')
    root.setLevel(logging.DEBUG)
    formatter = logging.Formatter(log_format)

    logger = RotatingFileHandler('flexo.log', maxBytes=50 * 1024, backupCount=3)
    logger.setLevel(logging.DEBUG)
    logger.setFormatter(formatter)
    root.addHandler(logger)

    logger = StreamHandler()
    logger.setLevel(logging.ERROR)
    logger.setFormatter(formatter)
    root.addHandler(logger)

if __name__ == '__main__':
    from optparse import OptionParser

    parser = OptionParser()
    parser.add_option('-H', '--hostname', default='localhost')
    parser.add_option('-P', '--port', type='int', default=6667)
    parser.add_option('-n', '--nick', default='flexo')
    parser.add_option('-N', '--name', default='Flexo')
    opts, args = parser.parse_args()

    if args:
        print >>sys.stderr, 'No arguments, please.'
        sys.exit(1)

    os.chdir(os.path.dirname(__file__))

    configure_logging(opts)

    main(opts)
